// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        noisTexture:    { value: white }
        alphaThreshold: { value: 0.5 }
        MoveTiling_Offset:      { value: [1, 1, 0, 0]  }
        mainColor:      { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
        xMove:            { value: 0.05, target: coatRoughness.x, editor: { slide : true, range : [-0.1, 0.1] , step : 0.0001 } }
        yMove:            { value: 0.05, target: coatRoughness.y, editor: { slide : true, range : [-0.1, 0.1] , step : 0.0001 } }
        noisPow:  { value: 0.05, target: coatRoughness.z, editor: { slide : true, range : [0.0, 1.0] , step : 0.0001 } }
        waveInt:  { value: 0.05, target: coatRoughness.w, editor: { slide : true, range : [0.0, 1.0] , step : 0.0001 } }
        sizeInt:  { value: 0.05, target: uvsize.x, editor: { slide : true, range : [-15.0, 15.0] , step : 0.0001 } }
        moveInt1:  { value: 1.00, target: uvsize.y, editor: { slide : true, range : [-10.0, 10.0] , step : 0.0001 } }
}%


CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec2 uv;


  vec4 vert () {

    // uniform builtin {

    // };


    vec4 pos = vec4(a_position, 1);


    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    uv = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>
  in vec4 color;
  in vec2 v_uv;
  // in vec3 v_position;

  #if USE_TEXTURE
    in vec2 uv0;
    uniform  sampler2D noisTexture;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif



  uniform Constant {
    vec4 MoveTiling_Offset;
    vec4 mainColor;
    vec4 coatRoughness;
    vec4 uvsize;
    };



    vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    // 计算旋转后的纹理坐标
    #if USE_TEXTURE
    // vec2 moveuvnew = vec2(1,(uvsize.y*uv0.y));
      vec2 move =  fract( cc_time.xx*coatRoughness.xy*0.1) ;
      vec2 uvnew = vec2(1,(uvsize.x-uv0.y)*uvsize.y);
      
      vec4 nois =  texture(noisTexture,uv0*MoveTiling_Offset.xy*uvnew+MoveTiling_Offset.zw+move);
      // vec4 movetex =   texture(MoveTexture, uv0*MoveTiling_Offset.xy +MoveTiling_Offset.zw +move)*moveColor;
      o *= texture(cc_spriteTexture, uv0 +nois.xy*coatRoughness.zz)*mainColor;//CCSampleWithAlphaSeparated
      
      o += (nois)*coatRoughness.w;
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;

      #endif
    #endif

    o *= color;
    // ALPHA_TEST(o);
    return o;
  }
}%
