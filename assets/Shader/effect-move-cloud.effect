// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        mainTexMove:      { value: [0, 0, 0, 0]  }
        cloud2Tex: { value: black }
        cloud2Color:      { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
        cloud2laye1X:            { value: 0.05, target: coatRoughness.x, editor: { slide : true, range : [-1.0, 1.0] , step : 0.0001 } }
        cloud2laye1Y:            { value: 0.05, target: coatRoughness.y, editor: { slide : true, range : [-1.0, 1.0] , step : 0.0001 } }
        could2move:      { value: [1, 1, 0, 0]  }
        cloud3Tex: { value: black }
        cloud3Color:      { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
        could3move:      { value: [1, 1, 0, 0]  }
        CloudScaleX:  { value: 0.05, target: coatRoughness.z, editor: { slide : true, range : [0.0, 2.0] , step : 0.0001 } }
        CloudScaleY:  { value: 0.05, target: coatRoughness.w, editor: { slide : true, range : [0.0, 2.0] , step : 0.0001 } }
        
        
        
}%


CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec2 uv;


  vec4 vert () {

    vec4 pos = vec4(a_position, 1);


    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    // v_uv= a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>
  in vec4 color;
  in vec2 v_uv;


  #if USE_TEXTURE
    in vec2 uv0;
    in vec2 uv;
    uniform sampler2D cloud2Tex;
    uniform sampler2D cloud3Tex;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif



  uniform Constant {
    vec4 could2move;
    vec4 mainTexMove;
    vec4 coatRoughness;
    vec4 cloud2Color;
    vec4 could3move;
    vec4 cloud3Color;
    };

    vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);


    // 计算旋转后的纹理坐标
    #if USE_TEXTURE



    vec2 move3 =  fract( could3move.xy* cc_time.xx);
    vec2 center = vec2(0.5,0.5);
    vec2 dir = uv0 - center;
    vec2 dir1 = dir;
    dir1 *=pow((uv0.y+1.8),2.0);//*coatRoughness.zw;
    float mask = 1.0-  clamp((uv0.y-0.65)*2.0,0.0,1.0);

    vec2 scaledUV3 = center + dir1*could3move.zw+move3 ;
    vec4 cloud2= texture(cloud3Tex,scaledUV3)* mask *cloud3Color;

    #if TEXTURE2
    vec2 move =  fract( cc_time.xx*coatRoughness.xy);
    vec2 move2 =  fract( cc_time.xx*could2move.xy);
    vec2 scaledUV = center + dir1*coatRoughness.zw+move ;
    vec2 scaledUV1 = center + dir1*coatRoughness.zw+could2move.zw+move2 ;
    float nois1 = texture(cloud2Tex,scaledUV1).g;
    float nois2 = texture(cloud2Tex,scaledUV).b;
    float cloud  = nois1*nois1;
    float cloud1 =nois2*nois2;

    vec4 allcloud =cloud*cloud1*1.6*cloud2Color* mask;
    o.rgb += allcloud.rgb;
    #endif

    vec2 mainmove = uv0;

    #if MAINTEXMOVE
    
    mainmove += fract( cc_time.xx*mainTexMove.xy)*2.0;
    // mainmove = clamp(mainmove,0.01,0.99);
    #endif


    o *= texture(cc_spriteTexture, mainmove );
    
    o.rgb +=cloud2.rgb*cloud2.a;
    #if IS_GRAY
      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
      o.r = o.g = o.b = gray;

    #endif
      // o = cloud;
    #endif

    o *= color;
    // ALPHA_TEST(o);
    return o;
  }
}%
