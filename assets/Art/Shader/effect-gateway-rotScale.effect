// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          #_src_alpha
          blendDst: one
          #_minus_src_alpha
          blendSrcAlpha: one_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        PolerTexture:    { value: white }
        PolerTiling_Offset:      { value: [1, 1, 0, 0]  }
        mainColor:      { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
        polerColor:      { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
        RotColor:      { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
        xxx:            { value: 0.05, target: coatRoughness.x, editor: { slide : true, range : [-2.0, 20.0] , step : 0.0001 } }
        yyy:            { value: 0.05, target: coatRoughness.y, editor: { slide : true, range : [-2.0, 2.0] , step : 0.0001 } }
        rotationAngle:  { value: 0.05, target: coatRoughness.z, editor: { slide : true, range : [-20.0, 20.0] , step : 0.0001 } }
        Center:         { value:  [0.5, 0.5], target: center.xy, editor: { slide : true, range : [-10.0, 10.0] , step : 0.0001 } }
        EdgeRange:       { value:  1.5, target: center.z, editor: { slide : true, range : [0.001, 10.0] , step : 1.000 } }
        RotTexture:    { value: white }
        # rotTex :    { value: white }
}%


CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec2 uv;

  // uniform Constant {
  //   vec4 PolerTiling_Offset;
  //   vec4 mainColor;
  //   vec4 polerColor;
  //   vec4 RotColor;
  //   vec4 coatRoughness;
  //   vec4 center;
  //   };

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    // pos.x *=  sin(cc_time.x);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    uv = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>
  in vec4 color;
  in vec2 v_uv;
  // in vec3 v_position;

  #if USE_TEXTURE
    in vec2 uv0;
    uniform  sampler2D PolerTexture;
    uniform  sampler2D RotTexture;
    // uniform sampler2D rotTex;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif



  uniform Constant {
    vec4 PolerTiling_Offset;
    vec4 mainColor;
    vec4 polerColor;
    vec4 RotColor;
    vec4 coatRoughness;
    vec4 center;
    };



    vec4 frag () {
    vec4 o = vec4(1, 1, 1,0);
    // 计算旋转后的纹理坐标
    #if USE_TEXTURE
  float u_rotationAngle = cc_time.x*coatRoughness.z;

  vec2    xxx =(uv0.xy-0.5)* (0.55+sin(cc_time.x*5.0)*0.05)*2.0 +0.5;

      vec2 rotatedUV = vec2(
        cos(u_rotationAngle) * (uv0.x - center.x) - sin(u_rotationAngle) * (uv0.y - center.y) + center.x,
        sin(u_rotationAngle) * (uv0.x - center.x) + cos(u_rotationAngle) * (uv0.y - center.y) + center.y
      );
      vec2 uv_TextureSample0 = uv0.xy ;//* PolerTiling_Offset.xy + PolerTiling_Offset.zw;
      vec2 CenteredUV15_g1 = ( uv_TextureSample0 - vec2( 0.5,0.5 ) );

      vec2 appendResult23_g1 = (vec2(( length( CenteredUV15_g1 ) * PolerTiling_Offset.x * 2.0 ) , ( atan( CenteredUV15_g1.x , CenteredUV15_g1.y ) * ( 1.0 / 6.28318548202515 ) *PolerTiling_Offset.y)));

      vec2 poleruv =  fract( cc_time.xx*coatRoughness.xy)*2.0-1.0;
      vec4 polertex =   texture( PolerTexture, appendResult23_g1  +poleruv);
      vec4 mask = CCSampleWithAlphaSeparated(cc_spriteTexture, xxx);//CCSampleWithAlphaSeparated

      vec4 rotTex =    texture(RotTexture, rotatedUV) ;
      // mask.b = mask.r * polertex.r;
       o = RotColor*rotTex*mask.r +polerColor*polertex.r*mask.r +mask.g *mainColor + pow(mask.r,2.0)*0.5;// +mask.r*0.6;// + mask.g*mainColor*1.2;//*pow(o.a,center.z);  pow(mask.r,8.0)
      //  o = mix(o,mainColor,mask.g);
      //  o= mask.bbbb*2.0;
      //  o *= polertex*polertex.a;
      //  o= mask.r;
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;

      #endif
    #endif

    o *= color;
    // ALPHA_TEST(o);
    return o;
  }
}%
