
CCEffect %{
techniques: 
  - passes: 
      - vert: sprite-vs:vert
        frag: sprite-fs:frag
        depthStencilState: 
          depthTest: false
          depthWrite: false
        blendState: 
          targets: 
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendDstAlpha: one_minus_src_alpha
        rasterizerState: 
          cullMode: none
        properties: 
          # subTexture:    { value: black }
}%
        
CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
  out vec4 color;
  out vec2 uv0;
 
 vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    uv0 = a_texCoord;
    color = a_color;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  // #include <SideTransition>
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>
const float tranSize = 32.;

float BoxTransition(vec2 uv, float progression) {
  float mask = 0.0;
  vec2 fragCoord = gl_FragCoord.xy;
  vec2 blockPos = vec2(progression) * cc_screenSize.xy;
  vec2 p = ceil(fragCoord / tranSize) * tranSize; 
  float progress = (p.x + p.y) / (blockPos.x + blockPos.y);
  vec2 v = abs(fragCoord - p + vec2(tranSize/2.));
  if (max(v.x, v.y) * progress < tranSize/2.) {
      mask = 1.0;
  }
  return mask;
}

  in vec4 color;
  in vec2 uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  // uniform sampler2D subTexture;

  vec4 frag () {
    // float mask0;
    vec4 mainColor = texture(cc_spriteTexture, uv0);
    // vec4 mixColor = texture(subTexture, uv0);
    float progression = 1.-color.r;
    mainColor.a =1.0 - BoxTransition(uv0, progression);
     ALPHA_TEST(mainColor);
    //  clip(mainColor.a);
    return mainColor;
   }
 }%
